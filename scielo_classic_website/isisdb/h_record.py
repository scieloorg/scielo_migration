import logging
import os
from functools import cached_property

# generated by ModelBuilder
from scielo_classic_website.isisdb.base_h_record import BaseDocumentRecord
from scielo_classic_website.utils.windows_path import fix_windows_path


# generated by ModelBuilder
class DocumentRecord(BaseDocumentRecord):
    def __init__(self, record, multi_val_tags=None, data_dictionary=None):
        super().__init__(record, multi_val_tags, data_dictionary)

        self._filename_no_ext, ext = os.path.splitext(self.file_code)
        self._file_type = "xml" if ext == ".xml" else "html"

    @property
    def supplement(self):
        """
        SciELO PID v1
        v002
        """
        return self.vol_suppl or self.num_suppl

    @cached_property
    def scielo_pid_v1(self):
        """
        SciELO PID v1
        v002
        """
        value = self.get_field_content("v002", subfields={}, single=True, simple=True)
        if value and len(value) == 23:
            return value

    @cached_property
    def original_title(self):
        """
        Original article title
        v012
        """
        return super().article_titles[0]["text"]

    @cached_property
    def translated_titles(self):
        """
        Translated article titles
        v012
        """
        return super().article_titles[1:]

    @cached_property
    def original_abstract(self):
        """
        Original article abstract
        v012
        """
        try:
            return super().abstracts[0]["text"]
        except IndexError:
            return None

    @cached_property
    def translated_abstracts(self):
        """
        Translated article abstracts
        v012
        """
        try:
            return super().abstracts[1:]
        except IndexError:
            return None

    @cached_property
    def keywords_groups(self):
        _kwg = {}
        for item in self.keywords:
            if not item.get("language"):
                continue
            try:
                keyword = item["text"]
                keyword += ", " + item["subkey"]
            except KeyError:
                pass
            try:
                _kwg[item["language"]].append(keyword)
            except KeyError:
                _kwg[item["language"]] = [keyword]
        return _kwg

    @cached_property
    def issue_folder(self):
        pr = self.is_press_release or ""
        if self.issue_number == "ahead":
            return f"{self.publication_issue_date[:4]}nahead{pr}"

        labels = ["v", "n", "s", ""]
        values = [
            self.volume,
            self.issue_number,
            self.supplement,
            self.is_press_release,
        ]
        items = []
        for label, value in zip(labels, values):
            if value:
                items.append(f"{label}{value}")
        return "".join(items)

    @cached_property
    def file_code(self):
        return fix_windows_path(super().file_code)

    @cached_property
    def filename(self):
        return os.path.basename(self.file_code)

    @cached_property
    def file_type(self):
        return self._file_type

    @cached_property
    def filename_without_extension(self):
        return os.path.basename(self._filename_no_ext)
