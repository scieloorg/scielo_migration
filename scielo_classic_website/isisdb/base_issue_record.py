# generated by ModelBuilder
from functools import lru_cache
from scielo_classic_website.isisdb.meta_record import MetaRecord

ATTRIBUTES = (
    "journal",
    "start_month",
    "end_month",
    "is_ahead_of_print",
    "url",
    "assets_code",
    "label",
    "type",
    "volume",
    "number",
    "titles",
    "order",
    "is_press_release",
    "bibliographic_legends",
    "bibliographic_strip",
    "sections",
    "publication_date",
    "controlled_vocabulary",
    "processing_date",
    "update_date",
    "creation_date",
    "editorial_standard",
    "total_documents",
    "supplement_volume",
    "supplement_number",
    "is_marked_up",
    "permissions",
    "scielo_domain",
    "publisher_id",
    "collection_acronym",
)


def adapt_data(original):
    data = {}
    data["journal"] = original["journal"]
    data["start_month"] = original["start_month"]
    data["end_month"] = original["end_month"]
    data["is_ahead_of_print"] = original["is_ahead_of_print"]
    data["url"] = original["url"]
    data["assets_code"] = original["assets_code"]
    data["label"] = original["label"]
    data["type"] = original["type"]
    data["volume"] = original["volume"]
    data["number"] = original["number"]
    data["titles"] = original["titles"]
    data["order"] = original["order"]
    data["is_press_release"] = original["is_press_release"]
    data["bibliographic_legends"] = original["bibliographic_legends"]
    data["bibliographic_strip"] = original["bibliographic_strip"]
    data["sections"] = original["sections"]
    data["publication_date"] = original["publication_date"]
    data["controlled_vocabulary"] = original["controlled_vocabulary"]
    data["processing_date"] = original["processing_date"]
    data["update_date"] = original["update_date"]
    data["creation_date"] = original["creation_date"]
    data["editorial_standard"] = original["editorial_standard"]
    data["total_documents"] = original["total_documents"]
    data["supplement_volume"] = original["supplement_volume"]
    data["supplement_number"] = original["supplement_number"]
    data["is_marked_up"] = original["is_marked_up"]
    data["permissions"] = original["permissions"]
    data["scielo_domain"] = original["scielo_domain"]
    data["publisher_id"] = original["publisher_id"]
    data["collection_acronym"] = original["collection_acronym"]
    return data


# generated by ModelBuilder
class BaseIssueRecord(MetaRecord):
    def __init__(self, record, multi_val_tags=None, data_dictionary=None):
        super().__init__(record, multi_val_tags, data_dictionary)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def attributes(self):
        return dict([(k, getattr(self, k)) for k in ATTRIBUTES])

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def journal(self):
        """
        Journal
        v035
        """
        return self.get_field_content("v035", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def start_month(self):
        """
        Start Month
        v000
        """
        return self.get_field_content("v000", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def end_month(self):
        """
        End Month
        v000
        """
        return self.get_field_content("v000", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def is_ahead_of_print(self):
        """
        Is Ahead Of Print
        v000
        """
        return self.get_field_content("v000", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def url(self):
        """
        Url
        v000
        """
        return self.get_field_content("v000", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def assets_code(self):
        """
        Assets Code
        v004
        """
        return self.get_field_content("v004", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def label(self):
        """
        Label
        v004
        """
        return self.get_field_content("v004", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def type(self):
        """
        Type
        v031
        """
        return self.get_field_content("v031", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def volume(self):
        """
        Volume
        v031
        """
        return self.get_field_content("v031", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def number(self):
        """
        Number
        v032
        """
        return self.get_field_content("v032", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def titles(self):
        """
        Titles
        v033
        """
        return self.get_field_content("v033", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def order(self):
        """
        Order
        v036
        """
        return self.get_field_content("v036", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def is_press_release(self):
        """
        Is Press Release
        v041
        """
        return self.get_field_content("v041", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def bibliographic_legends(self):
        """
        Bibliographic Legends
        v043
        """
        return self.get_field_content("v043", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def bibliographic_strip(self):
        """
        Bibliographic strip
        v043 {'t': 'short_title', 'v': 'volume', 'n': 'number', 's': 'suppl', 'l': 'language', 'c': 'city', 'a': 'year', 'm': 'months'}
        """
        return self.get_field_content(
            "v043",
            subfields={
                "t": "short_title",
                "v": "volume",
                "n": "number",
                "s": "suppl",
                "l": "language",
                "c": "city",
                "a": "year",
                "m": "months",
            },
            single=False,
            simple=False,
        )

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def sections(self):
        """
        Sections
        v049
        """
        return self.get_field_content(
            "v049",
            subfields={"l": "language", "t": "text", "c": "code"},
            single=False,
            simple=False,
        )

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def publication_date(self):
        """
        Publication Date
        v065
        """
        return self.get_field_content("v065", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def controlled_vocabulary(self):
        """
        Controlled Vocabulary
        v085
        """
        return self.get_field_content("v085", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def processing_date(self):
        """
        Processing Date
        v091
        """
        return self.get_field_content("v091", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def update_date(self):
        """
        Update Date
        v091
        """
        return self.get_field_content("v091", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def creation_date(self):
        """
        Creation Date
        v093
        """
        return self.get_field_content("v093", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def editorial_standard(self):
        """
        Editorial Standard
        v117
        """
        return self.get_field_content("v117", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def total_documents(self):
        """
        Total Documents
        v122
        """
        return self.get_field_content("v122", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def supplement_volume(self):
        """
        Supplement Volume
        v131
        """
        return self.get_field_content("v131", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def supplement_number(self):
        """
        Supplement Number
        v132
        """
        return self.get_field_content("v132", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def is_marked_up(self):
        """
        Is Marked Up
        v200
        """
        return self.get_field_content("v200", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def permissions(self):
        """
        Permissions
        v541
        """
        return self.get_field_content("v541", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def scielo_domain(self):
        """
        Scielo Domain
        v690
        """
        return self.get_field_content("v690", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def publisher_id(self):
        """
        Publisher Id
        v880
        """
        return self.get_field_content("v880", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @property
    @lru_cache(maxsize=1)
    def collection_acronym(self):
        """
        Collection Acronym
        v992
        """
        return self.get_field_content("v992", subfields={}, single=True, simple=True)
