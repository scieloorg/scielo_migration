# generated by ModelBuilder
from functools import cached_property
from scielo_classic_website.isisdb.meta_record import MetaRecord

ATTRIBUTES = (
    "record_type_index",
    "paragraph_text",
    "record_type",
    "reference_index",
)


def adapt_data(original):
    data = {}
    data["record_type_index"] = original["record_type_index"]
    data["paragraph_text"] = original["paragraph_text"]
    data["record_type"] = original["record_type"]
    data["reference_index"] = original["reference_index"]
    return data


# generated by ModelBuilder
class BaseParagraphRecord(MetaRecord):
    def __init__(self, record, multi_val_tags=None, data_dictionary=None):
        super().__init__(record, multi_val_tags, data_dictionary)

    @cached_property
    def data(self):
        return {
            "text": self.paragraph_text,
            "index": self.record_type_index,
            "reference_index": self.reference_index,
        }

    # generated by ModelBuilder
    @cached_property
    def attributes(self):
        return dict([(k, getattr(self, k)) for k in ATTRIBUTES])

    # generated by ModelBuilder
    @cached_property
    def record_type_index(self):
        """
        record_type_index
        v701
        """
        return self.get_field_content("v701", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @cached_property
    def paragraph_text(self):
        """
        paragraph_text
        v704
        """
        return self.get_field_content("v704", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @cached_property
    def record_type(self):
        """
        record_type
        v706
        """
        return self.get_field_content("v706", subfields={}, single=True, simple=True)

    # generated by ModelBuilder
    @cached_property
    def reference_index(self):
        """
        reference_index
        v888
        """
        return self.get_field_content("v888", subfields={}, single=True, simple=True)
